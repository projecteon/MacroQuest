#include includes\spell_routines.inc
#turbo

Sub Main(string Search)
    /declare testIniFileName        string  local "ini/${MacroQuest.Server}/Test_${Me.CleanName}.ini"
    /if (!${Defined[iniBuffDimensions]})                /declare iniBuffDimensions              int     outer 3 
    /if (!${Defined[iniSelfBuffDimensions]})            /declare iniSelfBuffDimensions          int     outer 2
   
    | /call iniBuffs ${testIniFileName} "Buffs" "Buff" ${iniBuffDimensions} Buffs
    | /call iniBuffs ${testIniFileName} "SelfBuffs" "SelfBuff" ${iniSelfBuffDimensions} SelfBuffs
    /call iniBuffs2 ${testIniFileName} "Buffs" "Buff" 
    /call iniBuffs2 ${testIniFileName} "Buffs" "Self Buff" 
    /call iniBuffs2 ${testIniFileName} "Buffs" "Bot Buff"
    /call iniBuffs2 ${testIniFileName} "Buffs" "Group Buff"

    | /echo ${Buffs[1,1]} ${Buffs[1,2]} ${Buffs[1,3]}
    | /echo ${SelfBuffs[1,1]} ${SelfBuffs[1,2]}
    
    | /echo ${NetBots} 
    | /echo ${NetBots.Client} 
    | /echo ${NetBots.Counts}
    | /echo ${SpellTimer[${Target.ID},"Snare"]}
/return 

Sub checkMezz
    /declare mezzRadius       int    local 40
    /echo "DoMezz npc" ${SpawnCount[npc radius ${mezzRadius}]}
    /echo "DoMezz targetable" ${SpawnCount[targetable radius ${mezzRadius}]}
    /echo "DoMezz playerstate 4" ${SpawnCount[playerstate 4 radius ${mezzRadius}]}
    /echo "DoMEzz npc los" ${SpawnCount[npc los radius ${mezzRadius}]}
    /echo "Target level" ${Target.Level}
/return


Sub iniBuffs(string INIFile, string section, string keyName, int arrayDimensions, arrayName)
    /declare Keys       string  local
    /declare k          int     local
    /declare s          int     local

    /varset Keys ${Ini[${INIFile},${section}]}
    :TrimKeys
        /if (${Keys.Right[1].Equal[|]}) /varset Keys ${Keys.Left[${Math.Calc[${Keys.Length}-1]}]}
        
        /if (${Keys.Right[1].Equal[|]}) /goto :TrimKeys

        /declare numberOfBuffs int local ${Math.Calc[${Keys.Count[|]}+1]}
        /if (${numberOfBuffs} < 1) /return

        /if (${Defined[${arrayName}]}) /deletevar ${arrayName}
        /declare ${arrayName}[${numberOfBuffs},${arrayDimensions}] string outer

        /declare key string local
        /for k 1 to ${Math.Calc[${Keys.Count[|]}+1]}
            /varset key ${Keys.Arg[${k},|]}
            /for s 1 to ${arrayDimensions}
                /varset ${arrayName}[${k},${s}] ${Ini[${INIFile},${section},${key}].Token[${s},/]}
            /next s
        /next k
/return


Sub iniBuffs2(string INIFile, string section, string keyName)
    /declare Keys       string  local
    /declare k          int     local
    /declare s          int     local

    /varset Keys ${Ini[${INIFile},${section}]}
    :TrimKeys
        /if (${Keys.Right[1].Equal[|]}) /varset Keys ${Keys.Left[${Math.Calc[${Keys.Length}-1]}]}
        
        /if (${Keys.Right[1].Equal[|]}) /goto :TrimKeys

        /echo "2" ${Keys}
        /declare numberOfBuffs int local 0

        /declare key string local
        /for k 1 to ${Math.Calc[${Keys.Count[|]}+1]}
            /varset key ${Keys.Arg[${k},|]}
            /if (${key.Left[-2].Equal[${keyName}]}) {
                /varcalc numberOfBuffs ${numberOfBuffs}+1
            } else /if (${key.Left[-1].Equal[${keyName}]}) {
                /varcalc numberOfBuffs ${numberOfBuffs}+1
            }
        /next k
        /echo ${keyName} " - " ${numberOfBuffs}
/return